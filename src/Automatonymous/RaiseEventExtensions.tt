<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace Automatonymous
{
    using System;
    using System.Diagnostics;
    using System.Threading;
    using System.Threading.Tasks;
    using Contexts;

    [DebuggerNonUserCode]
    public static class RaiseEventExtensions
    {
        /// <summary>
        /// Raise a simple event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="event">The event to raise</param>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TInstance>(this T machine, TInstance instance, Event @event,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
        {
            if (@event == null)
                throw new ArgumentNullException(nameof(@event));

            var context = new StateMachineEventContext<TInstance>(machine, instance, @event, cancellationToken);

            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a simple event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="eventSelector">Selector to the event on the state machine</param>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TInstance>(this T machine, TInstance instance, Func<T, Event> eventSelector,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
        {
            Event @event = eventSelector(machine);
            if (@event == null)
                throw new ArgumentNullException(nameof(eventSelector), "The event selector did not return a valid event from the state machine");

            var context = new StateMachineEventContext<TInstance>(machine, instance, @event, cancellationToken);

            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a data event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TData">The event data type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="event">The event to raise</param>
        /// <param name="data">The event data</param>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TData, TInstance>(this T machine, TInstance instance, Event<TData> @event, TData data,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
        {
            if (@event == null)
                throw new ArgumentNullException(nameof(@event));

            var context = new StateMachineEventContext<TInstance, TData>(machine, instance, @event, data, cancellationToken);

            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a data event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TData">The event data type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="eventSelector">Selector to the event on the state machine</param>
        /// <param name="data">The event data</param>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TData, TInstance>(this T machine, TInstance instance, Func<T, Event<TData>> eventSelector, TData data,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
        {
            Event<TData> @event = eventSelector(machine);
            if (@event == null)
                throw new ArgumentNullException(nameof(eventSelector), "The event selector did not return a valid event from the state machine");

            var context = new StateMachineEventContext<TInstance, TData>(machine, instance, @event, data, cancellationToken);

            return machine.RaiseEvent(context);
        }

<#
    for (int i = 1; i <= 16; i++)
    {
        var tInputArgs = String.Concat(Enumerable.Range(1, i).Select(it => String.Format(",T{0}", it)));
        var tWheres = String.Join(Environment.NewLine + "            ",
            Enumerable.Range(1, i).Select(it => String.Format("where T{0} : class", it)));
        var tComments = String.Join(Environment.NewLine + "        ",
            Enumerable.Range(1, i).Select(
                it => String.Format("/// <param name=\"context{0}\">An additional context added to the event context</param>", it)));
        var tArgs = String.Concat(Enumerable.Range(1, i).Select(it => String.Format(",in T{0}", it)));
        var tParms = String.Join(", ", Enumerable.Range(1, i).Select(it => String.Format("T{0} context{0}", it)));
#>
        /// <summary>
        /// Raise a simple event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="event">The event to raise</param>
        <#= tComments #>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TInstance<#= tInputArgs #>>(this T machine, TInstance instance, Event @event, <#= tParms #>,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
            <#= tWheres #>
        {
            if (@event == null)
                throw new ArgumentNullException(nameof(@event));

            var context = new StateMachineEventContext<TInstance>(machine, instance, @event, cancellationToken);<#
        for (int j = 1; j <= i; j++)
        {
#>
            context.GetOrAddPayload(() => context<#= j #>);<#
        }
#>


            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a simple event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="eventSelector">Selector to the event on the state machine</param>
        <#= tComments #>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TInstance<#= tInputArgs #>>(this T machine, TInstance instance, Func<T, Event> eventSelector, <#= tParms #>,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
            <#= tWheres #>
        {
            Event @event = eventSelector(machine);
            if (@event == null)
                throw new ArgumentNullException(nameof(eventSelector), "The event selector did not return a valid event from the state machine");

            var context = new StateMachineEventContext<TInstance>(machine, instance, @event, cancellationToken);<#
        for (int j = 1; j <= i; j++)
        {
#>
            context.GetOrAddPayload(() => context<#= j #>);<#
        }
#>


            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a data event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TData">The event data type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="event">The event to raise</param>
        /// <param name="data">The event data</param>
        <#= tComments #>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TData, TInstance<#= tInputArgs #>>(this T machine, TInstance instance, Event<TData> @event, TData data, <#= tParms #>,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
            <#= tWheres #>
        {
            if (@event == null)
                throw new ArgumentNullException(nameof(@event));

            var context = new StateMachineEventContext<TInstance, TData>(machine, instance, @event, data, cancellationToken);<#
        for (int j = 1; j <= i; j++)
        {
#>
            context.GetOrAddPayload(() => context<#= j #>);<#
        }
#>


            return machine.RaiseEvent(context);
        }

        /// <summary>
        /// Raise a data event on the state machine
        /// </summary>
        /// <typeparam name="T">The state machine type</typeparam>
        /// <typeparam name="TData">The event data type</typeparam>
        /// <typeparam name="TInstance">The instance type</typeparam>
        /// <param name="machine">The state machine</param>
        /// <param name="instance">The state machine instance</param>
        /// <param name="eventSelector">Selector to the event on the state machine</param>
        /// <param name="data">The event data</param>
        <#= tComments #>
        /// <param name="cancellationToken"></param>
        public static Task RaiseEvent<T, TData, TInstance<#= tInputArgs #>>(this T machine, TInstance instance, Func<T, Event<TData>> eventSelector, TData data, <#= tParms #>,
            CancellationToken cancellationToken = default(CancellationToken))
            where T : class, StateMachine, StateMachine<TInstance>
            where TInstance : class
            <#= tWheres #>
        {
            Event<TData> @event = eventSelector(machine);
            if (@event == null)
                throw new ArgumentNullException(nameof(eventSelector), "The event selector did not return a valid event from the state machine");

            var context = new StateMachineEventContext<TInstance, TData>(machine, instance, @event, data, cancellationToken);<#
        for (int j = 1; j <= i; j++)
        {
#>
            context.GetOrAddPayload(() => context<#= j #>);<#
        }
#>


            return machine.RaiseEvent(context);
        }
<#
    }
#>
    }
}
